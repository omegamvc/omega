#!/usr/bin/env php
<?php
/**
 * OMega Application.
 *
 * @link       https://omegamvc.github.io
 * @author     Adriano Giovannini <agisoftt@gmail.com>
 * @copyright  Copyright (c) 2024 Adriano Giovannini. (https://omegamvc.github.io)
 * @license    https://www.gnu.org/licenses/gpl-3.0-standalone.html     GPL V3.0+
 */

/**
 * @declare
 */
declare( strict_types = 1 );

/**
 * @use
 */
use Symfony\Component\Console\Application as SymfonyConsoleApplication;

define( 'OMEGA_START', microtime( true ) );

/**
 * Register the autoloader.
 *
 * Composer  provides  a  convenient automatically generated class
 * loader for this application. We just need to utilize it.  We'll
 * simply  require  it  into  the script here so we don't  need to
 * manually load our classes.
 */
require_once __DIR__ . '/vendor/autoload.php';

/**
 * Run the application.
 *
 * Once we have the application, we can handle the incoming request
 * using  the  application's HTTP  kernel.  Then, we  will send the
 * response  to  this  client's browser,  allowing the to enjoy our
 * application.
 */
$application = require_once __DIR__ . '/bootstrap/app.php';

/**
 * Register the Symfony console.
 *
 * This  code  snippet  configures  the  Symfony console to handle
 * command-line  commands.   It initializes  an  instance  of  the
 * console application, loads commands from a definition file, and
 * dynamically adds  them to the application. Finally, it executes
 * the  commands  specified  on  the  command  line.  An efficient
 * approach  for  managing  command-line  operations  in   Symfony
 * applications.
 */
$console  = new SymfonyConsoleApplication();
$commands = require __DIR__ . '/config/console.php';

foreach ($commands as $command) {
    $console->add(new $command());
}

try {
    $console->run();
} catch (Exception $e) {
    // -> Do nothing
}
